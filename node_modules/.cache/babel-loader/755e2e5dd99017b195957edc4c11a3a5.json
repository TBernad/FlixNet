{"ast":null,"code":"var _jsxFileName = \"/home/tbernad/Projets/tuto/flixnet/src/Components/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"../axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailer] = useState(\"\"); //runs the code when the row is loaded\n  //if whe let [], it will only runs once, wont run again\n  //else, whe can add a dependencie to rerun it\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `${isLargeRow ? \"row_posterLarge\" : \"row_poster\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"YM0uueD+RFWpXxC1n+EbJ5cUo3M=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/home/tbernad/Projets/tuto/flixnet/src/Components/Row.js"],"names":["React","useEffect","useState","axios","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailer","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC5C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,UAAD,EAAaC,UAAb,IAA2BV,QAAQ,CAAC,EAAD,CAAzC,CAF4C,CAI5C;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeY,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUR,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;AASA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHD,GAAb;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKhB;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGG,MAAM,CAACc,GAAP,CAAYC,KAAD,iBACV;AACE,QAAA,SAAS,EAAG,GAAEhB,UAAU,GAAG,iBAAH,GAAuB,YAAa,EAD9D;AAEE,QAAA,GAAG,EAAG,GAAEJ,QAAS,GACfI,UAAU,GAAGgB,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aACxC,EAJH;AAKE,QAAA,GAAG,EAAEF,KAAK,CAACG;AALb,SAMOH,KAAK,CAACI,EANb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAHF,eAeE,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEjB,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA3CQb,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"../axios\";\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailer] = useState(\"\");\n\n  //runs the code when the row is loaded\n  //if whe let [], it will only runs once, wont run again\n  //else, whe can add a dependencie to rerun it\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row_posters\">\n        {movies.map((movie) => (\n          <img\n            className={`${isLargeRow ? \"row_posterLarge\" : \"row_poster\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n            key={movie.id}\n          />\n        ))}\n      </div>\n      <Youtube videoId={trailerUrl} opts={opts} />\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}